# main.py

import streamlit as st
from soup_game import SoupGame

st.set_page_config(page_title="–°–£–ü–û–õ–Æ–¶–ò–Ø", page_icon="ü•£", layout="centered")

if "game" not in st.session_state:
    st.session_state.game = SoupGame()

game = st.session_state.game
state = game.get_state()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("ü•£ –°–£–ü–û–õ–Æ–¶–ò–Ø")
st.markdown("**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–û–õ–û–î–ò–õ–¨–ù–ò–ö.** –ó–¥–µ—Å—å –∫–∏–ø–∏—Ç —Ä–∞–∑—É–º –∏ —Å—É–¥—å–±–∞.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
col1, col2 = st.columns(2)
with col1:
    st.markdown(f"üåÄ **–•–æ–¥:** `{state['turn']}` / `{game.max_turns}`")
    st.markdown(f"‚ù§Ô∏è **–ñ–∏–∑–Ω—å —Å—É–ø–∞:** `{state['hp']}`")

with col2:
    st.markdown("üì¶ **–†–µ—Å—É—Ä—Å—ã:**")
    for k, v in state["resources"].items():
        st.markdown(f"- {k}: `{v}`")

# –ü–æ–±–µ–¥–∞
if state["status"] == "ascended":
    st.balloons()
    st.success("üéâ –°—É–ø —Å—Ç–∞–ª —Å—É—â–µ—Å—Ç–≤–æ–º –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Å—É–ø–æ–∑–Ω–∞–Ω–∏–µ–º!")
    st.button("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", on_click=lambda: st.session_state.clear())
    st.stop()

# –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
if state["status"] == "flushed":
    st.error("üöΩ –û –Ω–µ—Ç! –ö—Ç–æ-—Ç–æ —Å–ª–∏–ª —Ç–µ–±—è –≤ —É–Ω–∏—Ç–∞–∑... –°—É–ø –ø—Ä–æ–∏–≥—Ä–∞–ª.")
    st.button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", on_click=lambda: st.session_state.clear())
    st.stop()

st.divider()

# üìö –ñ—É—Ä–Ω–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
st.markdown("### üìú –°—É–ø–Ω—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏:")
if state["events_log"]:
    for e in reversed(state["events_log"]):
        st.markdown(f"- {e}")
else:
    st.markdown("_–°—É–ø –ø–æ–∫–∞ –º–∏—Ä–µ–Ω..._")

# üõê –§—Ä–∞–∫—Ü–∏–∏ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è
st.markdown("### üèõÔ∏è –§—Ä–∞–∫—Ü–∏–∏ —Å—É–ø–∞:")
for name, value in state["factions"].items():
    bar = "üü©" * max(0, value) + "üü•" * max(0, -value)
    st.markdown(f"**{name}**: {value} {bar}")

# üß™ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
st.markdown("### üî¨ –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:")
choices = game.get_upgrade_choices()

if not choices:
    st.warning("–í—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑—É—á–µ–Ω—ã. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥'.")
    if st.button("–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥"):
        game.next_turn()
        st.rerun()
    st.stop()

selected_name = st.radio("–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:", [c["name"] for c in choices])
selected_upgrade = next(u for u in choices if u["name"] == selected_name)

st.markdown(f"üîç **–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_upgrade['desc']}")

if st.button("üìà –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É"):
    game.apply_upgrade(selected_name)
    game.next_turn()
    st.rerun()

# üß† –°—Ç–∞—Ç—É—Å —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏
st.divider()
with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏"):
    st.markdown("**üß± –ü–æ—Å—Ç—Ä–æ–π–∫–∏:**")
    if state["structures"]:
        for s in state["structures"]:
            st.markdown(f"- üèóÔ∏è {s}")
    else:
        st.markdown("_–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ_")

    st.markdown("**üß¨ –ò–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**")
    if state["tech"]:
        for t in state["tech"]:
            st.markdown(f"- üìò {t}")
    else:
        st.markdown("_–°—É–ø –µ—â—ë –Ω–µ –ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∏—Å—Ç–∏–Ω—ã_")
