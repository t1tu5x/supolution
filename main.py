# main.py

import streamlit as st
from soup_game import SoupGame

st.set_page_config(page_title="–°–£–ü–û–õ–Æ–¶–ò–Ø", page_icon="ü•£", layout="centered")

def apply_custom_style():
    st.markdown("""
        <style>
        body {
            background-image: url('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExOGM4NmMyMmJjZjM3N2VkZGVkYmMyYmQ0YWI4ZjM2YjFkZGM4Y2QzZiZjdD1n/ZybDTC3S3kAUE/giphy.gif');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }
        .stApp {
            background-color: rgba(255, 255, 255, 0.88);
            padding: 2rem;
            border-radius: 25px;
        }
        </style>
    """, unsafe_allow_html=True)

def play_sound(url):
    st.markdown(f"""
        <audio autoplay>
            <source src="{url}" type="audio/mp3">
        </audio>
    """, unsafe_allow_html=True)

apply_custom_style()

if "game" not in st.session_state:
    st.session_state.game = SoupGame()

game = st.session_state.game
state = game.get_state()

st.title("ü•£ –°–£–ü–û–õ–Æ–¶–ò–Ø")
st.markdown("**–¢—ã ‚Äî —Å—É–ø. –†–∞–∑—É–º–Ω—ã–π. –ù–µ –¥–∞–π —Å–µ–±—è –≤—ã–ª–∏—Ç—å.**")

if state["turn"] == 0 and not state["tech"]:
    st.markdown("""
        <div style='padding:1em; background:#fff5db; border-left: 5px solid orange; border-radius: 8px;'>
            <h4>üì¢ –¢—ã ‚Äî —Å—É–ø. –ò —Ç—ã –∂–∏–≤–æ–π.</h4>
            <p>–í —ç—Ç–æ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –∫–∏–ø–∏—Ç –∂–∏–∑–Ω—å. –†–∞–∑–≤–∏–≤–∞–π —Å–≤–æ—é —Å—É–ø–Ω—É—é —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—é, –∑–∞–∫–ª—é—á–∞–π —Å–æ—é–∑—ã, —Å—Ç—Ä–æ–π —Ö—Ä–∞–º—ã... –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –±—ã—Ç—å –≤—ã–ª–∏—Ç—ã–º –≤ —É–Ω–∏—Ç–∞–∑.</p>
            <p><b>–¢–≤–æ—è –º–∏—Å—Å–∏—è:</b> –æ–±—Ä–µ—Å—Ç–∏ <i>–°—É–ø–æ–∑–Ω–∞–Ω–∏–µ</i> –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–≤–µ—Ä—Ü–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞.</p>
        </div>
    """, unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.markdown(f"üåÄ **–•–æ–¥:** `{state['turn']}` / `{game.max_turns}`")
    st.markdown(f"‚ù§Ô∏è **–ñ–∏–∑–Ω—å —Å—É–ø–∞:** `{state['hp']}`")

with col2:
    st.markdown("üì¶ **–†–µ—Å—É—Ä—Å—ã:**")
    for k, v in state["resources"].items():
        st.markdown(f"- {k}: `{v}`")

if state["status"] == "ascended":
    play_sound("https://cdn.pixabay.com/audio/2022/10/31/audio_8c8d2f5f20.mp3")
    st.balloons()
    st.success("üéâ –°—É–ø —Å—Ç–∞–ª —Å—É—â–µ—Å—Ç–≤–æ–º –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Å—É–ø–æ–∑–Ω–∞–Ω–∏–µ–º!")
    st.button("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", on_click=lambda: st.session_state.clear())
    st.stop()

if state["status"] == "flushed":
    play_sound("https://cdn.pixabay.com/audio/2023/04/28/audio_13fa01aa09.mp3")
    st.error("üöΩ –û –Ω–µ—Ç! –ö—Ç–æ-—Ç–æ —Å–ª–∏–ª —Ç–µ–±—è –≤ —É–Ω–∏—Ç–∞–∑... –°—É–ø –ø—Ä–æ–∏–≥—Ä–∞–ª.")
    st.button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", on_click=lambda: st.session_state.clear())
    st.stop()

st.divider()
st.markdown("### üìú –°—É–ø–Ω—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏:")
for e in reversed(state["events_log"]):
    st.markdown(f"- {e}")

st.markdown("### üèõÔ∏è –§—Ä–∞–∫—Ü–∏–∏ —Å—É–ø–∞:")
for name, value in state["factions"].items():
    bar = "üü©" * max(0, value) + "üü•" * max(0, -value)
    st.markdown(f"**{name}**: `{value}` {bar}")

if state.get("current_choice"):
    choice = state["current_choice"]
    st.markdown("### ‚öñÔ∏è –°—É–¥—å–±–æ–Ω–æ—Å–Ω—ã–π –≤—ã–±–æ—Ä!")
    st.markdown(f"**{choice['text']}**")
    col_a, col_b = st.columns(2)
    if col_a.button("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"):
        game.resolve_choice("yes")
        st.rerun()
    if col_b.button("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"):
        game.resolve_choice("no")
        st.rerun()

st.markdown("### üî¨ –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:")
choices = game.get_upgrade_choices()

if not choices:
    st.warning("–í—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑—É—á–µ–Ω—ã. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥'.")
    if st.button("–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥"):
        game.next_turn()
        st.rerun()
    st.stop()

selected_name = st.radio("–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:", [c["name"] for c in choices])
selected_upgrade = next(u for u in choices if u["name"] == selected_name)
st.markdown(f"üîç **–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_upgrade['desc']}")

if st.button("üìà –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É"):
    play_sound("https://cdn.pixabay.com/audio/2022/03/15/audio_3fd16212d1.mp3")
    game.apply_upgrade(selected_name)
    game.next_turn()
    st.rerun()

st.divider()
with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏"):
    st.markdown("**üß± –ü–æ—Å—Ç—Ä–æ–π–∫–∏:**")
    for s in state["structures"]:
        st.markdown(f"- üèóÔ∏è {s}") if state["structures"] else st.markdown("_–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ._")

    st.markdown("**üìò –ò–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**")
    for t in state["tech"]:
        st.markdown(f"- {t}") if state["tech"] else st.markdown("_–°—É–ø –µ—â—ë –Ω–µ –ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∏—Å—Ç–∏–Ω—ã._")
