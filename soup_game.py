# ‚úÖ soup_game.py ‚Äî —Ä–µ–¥–∏–∑–∞–π–Ω —è–¥—Ä–∞: —Ä–µ—Å—É—Ä—Å—ã, —Ñ—Ä–∞–∫—Ü–∏–∏, –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏, –ª–æ–≥–∏–∫–∞

import json
import random
import math

class SoupGame:
    def __init__(self, dlc_enabled=True):
        self.turn = 0
        self.hp = 100
        self.max_turns = 50
        self.status = "alive"

        # üéØ –†–µ—Å—É—Ä—Å—ã —Å —á—ë—Ç–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ —Ñ–∏–∑–∏–∫–æ–π
        self.resources = {
            "–±–µ–ª–∫–∏": 5,     # –†–æ—Å—Ç —Ç–∫–∞–Ω–µ–π, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP
            "–∂–∏—Ä—ã": 5,      # –¢–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è, –∑–∞—â–∏—Ç–∞ –æ—Ç —É—Ä–æ–Ω–∞
            "—É–≥–ª–µ–≤–æ–¥—ã": 5,  # –≠–Ω–µ—Ä–≥–∏—è, —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥
            "–º–∏–Ω–µ—Ä–∞–ª—ã": 5   # –ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏
        }

        self.metabolism_rate = 3  # —Å–∫–æ–ª—å–∫–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω—É–∂–Ω–æ –≤ —Ö–æ–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.temp_stability = 0   # –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è

        self.tech = []
        self.structures = []
        self.events_log = []
        self.quest_progress = {}

        self.upgrades = self.load_json("data/upgrades.json")
        self.tech_tree = self.load_json("data/tech_tree.json")
        self.events = self.load_json("data/events.json")
        self.choices = self.load_json("data/choices.json")
        self.quests = self.load_json("data/quests.json")

        # ü§ù –§—Ä–∞–∫—Ü–∏–∏ —Å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        self.factions = {
            "–°–ª–∏–≤–æ—á–Ω—ã–µ –ü–µ–ª—å–º–µ—à–∫–∏": 0,
            "–ì–æ—Ä–æ—à–∫–æ–≤–æ–µ –í–µ—Å–µ–ª—å–µ": 0,
            "–û—Ä–¥–µ–Ω –•—Ä—É—Å—Ç—è—â–∏—Ö –°—É—Ö–∞—Ä–∏–∫–æ–≤": 0,
            "–ú–∞—Ä–º–µ–ª–∞–¥–Ω—ã–µ –ú—ã—Å–ª–∏—Ç–µ–ª–∏": 0
        }

        self.current_choice = None
        self.resolved_choices = set()
        self.unlocked_themes = ["–ö–ª–∞—Å—Å–∏–∫–∞"]

        if dlc_enabled:
            for dlc in self.load_json("data/factions_dlc.json"):
                self.factions[dlc["name"]] = dlc.get("starting_reputation", 0)

    def load_json(self, path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []

    def next_turn(self):
        if self.status != "alive":
            return

        self.turn += 1

        # üìâ –≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç—ã: –µ—Å–ª–∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —à—Ç—Ä–∞—Ñ
        if self.resources["—É–≥–ª–µ–≤–æ–¥—ã"] < self.metabolism_rate:
            deficit = self.metabolism_rate - self.resources["—É–≥–ª–µ–≤–æ–¥—ã"]
            self.hp -= deficit * 3
            self.temp_stability += deficit
            self.events_log.append(f"‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ: –Ω–µ—Ö–≤–∞—Ç–∫–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ {deficit} ‚Üí HP ‚àí{deficit * 3}")
            self.resources["—É–≥–ª–µ–≤–æ–¥—ã"] = 0
        else:
            self.resources["—É–≥–ª–µ–≤–æ–¥—ã"] -= self.metabolism_rate

        # üî• –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–ª–∏—è–µ—Ç –Ω–∞ –∂–∏—Ä—ã –∏ HP
        if self.temp_stability > 3:
            damage = self.temp_stability - 2
            self.hp -= damage
            self.events_log.append(f"ü•µ –ü–µ—Ä–µ–≥—Ä–µ–≤! –ü–æ—Ç–µ—Ä—è–Ω–æ HP ‚àí{damage}")
        elif self.temp_stability < -3:
            self.hp -= 2
            self.events_log.append("ü•∂ –ü–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —Å—É–ø–∞: HP ‚àí2")

        # üìà –ü—Ä–∏—Ä–æ—Å—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Ñ—Ä–∞–∫—Ü–∏–π
        for res in self.resources:
            gain = 1
            if res == "–±–µ–ª–∫–∏" and "–ê–º–∏–Ω–æ–≥–µ–Ω–µ–∑" in self.tech:
                gain += 1
            if res == "—É–≥–ª–µ–≤–æ–¥—ã" and "–§–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è" in self.structures:
                gain += 1
            if res == "–º–∏–Ω–µ—Ä–∞–ª—ã" and self.factions["–ú–∞—Ä–º–µ–ª–∞–¥–Ω—ã–µ –ú—ã—Å–ª–∏—Ç–µ–ª–∏"] >= 3:
                gain += 1
            self.resources[res] += gain

        # üèõÔ∏è –í–ª–∏—è–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π
        for name, rep in self.factions.items():
            if rep <= -3 and random.random() < 0.3:
                self.hp -= 3
                self.events_log.append(f"‚öîÔ∏è {name} –∞—Ç–∞–∫–æ–≤–∞–ª–∏ —Å—É–ø! HP ‚àí3")
            if rep >= 4 and random.random() < 0.3:
                self.resources[random.choice(list(self.resources))] += 2
                self.events_log.append(f"üéÅ {name} –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ–º–æ—â—å!")

        if random.random() < 0.4:
            self.trigger_random_event()

        self.update_quests()
        self.maybe_trigger_choice()

        if self.hp <= 0 or self.turn >= self.max_turns:
            self.status = "flushed"

        if all(v >= 6 for v in self.factions.values()) and "–°—É–ø–æ–∑–Ω–∞–Ω–∏–µ" in self.tech:
            self.status = "ascended"

    def tech_requirements_met(self, upgrade_name):
        required = self.tech_tree.get(upgrade_name, [])
        return all(t in self.tech for t in required)

    def get_upgrade_choices(self):
        –¥–æ—Å—Ç—É–ø–Ω—ã–µ = [u for u in self.upgrades if u["name"] not in self.tech and self.tech_requirements_met(u["name"])]
        return random.sample(–¥–æ—Å—Ç—É–ø–Ω—ã–µ, min(3, len(–¥–æ—Å—Ç—É–ø–Ω—ã–µ)))

    def apply_upgrade(self, upgrade_name):
        –Ω–∞–π–¥–µ–Ω = next((u for u in self.upgrades if u["name"] == upgrade_name), None)
        if not –Ω–∞–π–¥–µ–Ω:
            return False

        for k, v in –Ω–∞–π–¥–µ–Ω.get("bonus", {}).items():
            if k in self.resources:
                self.resources[k] += v

        if "structure" in –Ω–∞–π–¥–µ–Ω:
            self.structures.append(–Ω–∞–π–¥–µ–Ω["structure"])

        for faction, shift in –Ω–∞–π–¥–µ–Ω.get("factions", {}).items():
            if faction in self.factions:
                self.factions[faction] += shift

        self.tech.append(–Ω–∞–π–¥–µ–Ω["name"])
        if –Ω–∞–π–¥–µ–Ω.get("win"):
            self.status = "ascended"

        return True

    def trigger_random_event(self):
        if not self.events:
            return
        event = random.choice(self.events)
        self.events_log.append(event["text"])

        effect = event.get("effect", {})
        for key, val in effect.get("resources", {}).items():
            if key in self.resources:
                self.resources[key] = max(0, self.resources[key] + val)

        for faction, shift in effect.get("factions", {}).items():
            if faction in self.factions:
                self.factions[faction] += shift

        if "hp" in effect:
            self.hp = max(0, self.hp + effect["hp"])

        if effect.get("death") is True:
            self.status = "flushed"

    def maybe_trigger_choice(self):
        if self.turn % 4 == 0 and self.current_choice is None:
            available = [c for c in self.choices if c["id"] not in self.resolved_choices]
            if available:
                self.current_choice = random.choice(available)

    def resolve_choice(self, answer: str):
        if not self.current_choice:
            return

        effects = self.current_choice.get(answer, {})

        for k, v in effects.get("resources", {}).items():
            if k in self.resources:
                self.resources[k] += v

        for f, delta in effects.get("factions", {}).items():
            if f in self.factions:
                self.factions[f] += delta

        if "hp" in effects:
            self.hp += effects["hp"]

        self.resolved_choices.add(self.current_choice["id"])
        self.current_choice = None

        if self.hp <= 0:
            self.status = "flushed"

    def update_quests(self):
        for q in self.quests:
            qid = q["id"]
            stage = self.quest_progress.get(qid, 0)
            if stage < len(q["stages"]):
                req = q["stages"][stage]["require"]
                if all(self.resources.get(k, 0) >= v for k, v in req.get("resources", {}).items()):
                    self.quest_progress[qid] = stage + 1
                    self.events_log.append(f"üåü –ö–≤–µ—Å—Ç " + q['name'] + f" ‚Äî —ç—Ç–∞–ø {stage+1} –ø—Ä–æ–π–¥–µ–Ω!")
                    for key, val in q["stages"][stage].get("reward", {}).get("resources", {}).items():
                        self.resources[key] += val

    def get_state(self):
        return {
            "turn": self.turn,
            "resources": dict(self.resources),
            "tech": list(self.tech),
            "hp": self.hp,
            "status": self.status,
            "factions": dict(self.factions),
            "structures": list(self.structures),
            "events_log": list(self.events_log[-5:]),
            "current_choice": self.current_choice,
            "unlocked_themes": list(self.unlocked_themes),
            "quest_progress": self.quest_progress
        }
